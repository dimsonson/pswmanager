// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: handlersconsume.proto

package grpc_handlers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerRMQhandlersClient is the client API for ServerRMQhandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerRMQhandlersClient interface {
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (ServerRMQhandlers_ConsumeClient, error)
}

type serverRMQhandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewServerRMQhandlersClient(cc grpc.ClientConnInterface) ServerRMQhandlersClient {
	return &serverRMQhandlersClient{cc}
}

func (c *serverRMQhandlersClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (ServerRMQhandlers_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerRMQhandlers_ServiceDesc.Streams[0], "/proto.ServerRMQhandlers/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverRMQhandlersConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerRMQhandlers_ConsumeClient interface {
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type serverRMQhandlersConsumeClient struct {
	grpc.ClientStream
}

func (x *serverRMQhandlersConsumeClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerRMQhandlersServer is the server API for ServerRMQhandlers service.
// All implementations must embed UnimplementedServerRMQhandlersServer
// for forward compatibility
type ServerRMQhandlersServer interface {
	Consume(*ConsumeRequest, ServerRMQhandlers_ConsumeServer) error
	mustEmbedUnimplementedServerRMQhandlersServer()
}

// UnimplementedServerRMQhandlersServer must be embedded to have forward compatible implementations.
type UnimplementedServerRMQhandlersServer struct {
}

func (UnimplementedServerRMQhandlersServer) Consume(*ConsumeRequest, ServerRMQhandlers_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedServerRMQhandlersServer) mustEmbedUnimplementedServerRMQhandlersServer() {}

// UnsafeServerRMQhandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerRMQhandlersServer will
// result in compilation errors.
type UnsafeServerRMQhandlersServer interface {
	mustEmbedUnimplementedServerRMQhandlersServer()
}

func RegisterServerRMQhandlersServer(s grpc.ServiceRegistrar, srv ServerRMQhandlersServer) {
	s.RegisterService(&ServerRMQhandlers_ServiceDesc, srv)
}

func _ServerRMQhandlers_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerRMQhandlersServer).Consume(m, &serverRMQhandlersConsumeServer{stream})
}

type ServerRMQhandlers_ConsumeServer interface {
	Send(*ConsumeResponse) error
	grpc.ServerStream
}

type serverRMQhandlersConsumeServer struct {
	grpc.ServerStream
}

func (x *serverRMQhandlersConsumeServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServerRMQhandlers_ServiceDesc is the grpc.ServiceDesc for ServerRMQhandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerRMQhandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServerRMQhandlers",
	HandlerType: (*ServerRMQhandlersServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _ServerRMQhandlers_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "handlersconsume.proto",
}
